import pageRouter from"@/src/corejs/pageRouter.json";import webApp from"@/src/config/webApp.json";import Vue from"vue";import HatomMessage from"./hatom-message";import HatomQrcode from"./hatom-qrcode";const _this=Vue.prototype;const vueRouter={};["match","init","beforeEach","beforeResolve","afterEach","onReady","onError","push","replace","go","back","forward","getMatchedComponents","resolve","addRoutes"].forEach((method)=>{vueRouter[method]=(...args)=>{}});function setupWebViewJavascriptBridge(callback){if(window.WebViewJavascriptBridge){callback(window.WebViewJavascriptBridge)}else{document.addEventListener("WebViewJavascriptBridgeReady",function(){callback(window.WebViewJavascriptBridge)},false)}}class Plugin{constructor(router){setupWebViewJavascriptBridge(function(bridge){bridge.init()});this.router=router||vueRouter;this.isMobile=getIsMobile()}setBridge(funcName,callbackFunc){try{setupWebViewJavascriptBridge(function(bridge){bridge.registerHandler(funcName,callbackFunc)})}catch(err){console.log(err)}}native(funcName,callbackFunc,args={}){if(args&&typeof args==="object"&&Object.prototype.toString.call(args).toLowerCase()==="[object object]"&&!args.length){args=JSON.stringify(args)}else{console.log("args不符合规范")}this.debug.callback[funcName]=callbackFunc;if(getIsMobile()){window.WebViewJavascriptBridge.callHandler(funcName,args,(res)=>{res=JSON.parse(res);const rsp={funcName:funcName,res:res};if(res.code===0){rsp.status="success";if(this.debug&&this.debug.websocket&&this.debug.websocket.readyState===1){this.debug.websocket.send(JSON.stringify(rsp))}return callbackFunc(res)}else{rsp.status="fail";if(this.debug&&this.debug.websocket&&this.debug.websocket.readyState===1){this.debug.websocket.send(JSON.stringify(rsp))}console.log(funcName,res.message,args);return callbackFunc(res)}})}else{if(this.debug&&this.debug.websocket&&this.debug.websocket.readyState===1){this.debug.websocket.send(JSON.stringify({funcName:funcName,args:JSON.parse(args)}));_this.$hatomMessage(`正在调用${funcName}`)}console.log("调用插件：",funcName)}}camera(callbackFunc,args={}){const options={mQuality:args.mQuality||"50",destType:args.destType||"1",srcType:args.srcType||"1",targetWidth:args.targetWidth||"-1",targetHeight:args.targetHeight||"-1",encodingType:args.encodingType||"0",mediaType:args.mediaType||"0",allowEdit:args.allowEdit||false,correctOrientation:args.correctOrientation||false,saveToPhotoAlbum:args.saveToPhotoAlbum||false};this.native("CameraLauncher.takePicture",callbackFunc,options)}networkManager(callbackFunc){this.native("NetworkManagerPlugin.registerNetWorkReceiver",callbackFunc)}phoneCall(callbackFunc,args={}){this.native("System.phoneCall",callbackFunc,args)}sharePic(callbackFunc,args={}){console.log("sharePic ...");this.native("System.sharePic",callbackFunc,args)}shareText(callbackFunc,args={}){console.log("shareText ...");this.native("System.shareText",callbackFunc,args)}goMapApp(callbackFunc,params){this.native("GetMapAppPlugin.getMapApp",callbackFunc,params)}scan(callbackFunc){this.native("BarcodeScannerPlugin.scan",callbackFunc)}}const hatom=new Plugin();hatom.router.push=(route)=>{if(Object.prototype.toString.call(route)==="[object Object]"&&route.path){const routes=pageRouter.routes;if(routes.some((page)=>page.name===route.path)){getIsMobile()?hatom.native("Router.pushPage",(res)=>{console.log("Router.pushPage调用成功：",res)},{params:{page:`${route.path}.html`},target:`html:${webApp.h5packCode}:\/\/${route.path}.html`}):window.location.href=`${route.path}.html`}else{hatom.vueRouter.push(route)}}else{console.log("参数有误：",route)}};hatom.router.pop=(route)=>{if(Object.prototype.toString.call(route)==="[object Object]"&&route.path){const routes=pageRouter.routes;if(routes.some((page)=>page.name===route.path)){getIsMobile()?hatom.native("Router.popPage",(res)=>{console.log("Router.popPage调用成功：",res)},{params:{page:`${route.path}.html`},target:`html:${webApp.h5packCode}:\/\/${route.path}.html`}):window.history.back()}else{hatom.vueRouter.back()}}else{getIsMobile()?hatom.native("Router.popPage",(res)=>{console.log("Router.popPage调用成功：",res)}):hatom.vueRouter.back()}};hatom.locationInfo={};["getLocation","getLocationPermission","turnOffLocation"].forEach((method)=>{hatom.locationInfo[method]=(callbackFunc)=>{hatom.native(`GetLocationInfoPlugin.${method}`,callbackFunc)}});hatom.singleRealPlay={};["realPlay","playBack"].forEach((method)=>{hatom.singleRealPlay[method]=(callbackFunc,params)=>{hatom.native(`SingleRealPlay.${method}`,callbackFunc,params)}});hatom.rootInfo={};["getRootInfo","redirectLogin"].forEach((method)=>{hatom.rootInfo[method]=(callbackFunc)=>{hatom.native(`GetRootInfoPlugin.${method}`,callbackFunc)}});hatom.setting={};["updateApp","logout","modifyPassword","gotoSetting","gestureSetting","messageSetting","cameraFaceRecognition","getStatusInfo"].forEach((method)=>{hatom.setting[method]=(callbackFunc)=>{hatom.native(`SettingPlugin.${method}`,callbackFunc)}});hatom.page={preload:(callbackFunc,params)=>{hatom.native("Router.preload",callbackFunc,params)},exit:(callbackFunc)=>{hatom.native("Router.exitWebApp",callbackFunc)},popPage:(route)=>{if(getIsMobile()){hatom.native("Router.popPage",(res)=>{console.log("调用Router.openPage成功")},route)}else{console.log("调用Router.pushPage");if(route){window.location.hash="";window.location.pathname=route.params.page}else{window.history.back()}}},pushPage:(route)=>{if(getIsMobile()){hatom.native("Router.pushPage",(res)=>{console.log("调用Router.openPage成功")},route)}else{window.location.hash="";window.location.pathname=route.params.page}},back:(callbackFunc,params)=>{if(getIsMobile()){hatom.native("Router.backHistory",callbackFunc,params)}else{window.history.back()}},cleanCache:(callbackFunc)=>{hatom.native("Router.clearCache",callbackFunc)}};hatom.message={};["startMessage","stopMessage"].forEach((method)=>{hatom.message[method]=(callbackFunc,params)=>{hatom.native(`PushMessagePlugin.${method}Push`,callbackFunc,params)}});hatom.topBar={};["setTopBarLeftButton","setTopBarRightButton","setTopBarTitle","setTopBarBackground"].forEach((method)=>{hatom.topBar[method]=(callbackFunc,params)=>{hatom.native(`topbar.${method}`,callbackFunc,params)}});hatom.bottomBar={};["setItemConfig","selectItem","setBadge"].forEach((method)=>{hatom.bottomBar[method]=(callbackFunc,params)=>{hatom.native(`bottomNavigation.${method}`,callbackFunc,params)}});hatom.storage={setItem:(key,value)=>{if(getIsMobile()){const obj={};obj[key]=value;hatom.native("DataSharePlugin.saveData",(res)=>{console.log(key,value)},obj)}else{window.localStorage.setItem(key,value)}},getItem:(key,callbackFunc)=>{if(getIsMobile()){const obj={};obj[key]=key;hatom.native("DataSharePlugin.getData",callbackFunc,obj)}else{const res=window.localStorage.getItem(key);callbackFunc(res)}}};hatom.getScreenInfo=(callbackFunc)=>{hatom.native("Device.getScreenInfo",callbackFunc)};hatom.getSyncScreenInfo=async()=>new Promise((resolve)=>{hatom.native("Device.getScreenInfo",async(res)=>{resolve(res)})});hatom.deviceScreenInfo={getScreenInfo:(callbackFunc)=>{hatom.native("Device.getScreenInfo",callbackFunc)},getSyncScreenInfo:async()=>new Promise((resolve)=>{hatom.native("Device.getScreenInfo",async(res)=>{if(res.code==="0"){const screenInfo=JSON.parse(res.message);resolve(screenInfo)}else{resolve({})}})}),getStatusBarHeight:()=>{const res=this.getSyncScreenInfo();if(res.code==="0"){const screenInfo=JSON.parse(res.message);return screenInfo.statusBarHeight/screenInfo.screenDensity}else{return 0}},getScreenWidth:()=>{const res=this.getSyncScreenInfo();if(res.code==="0"){const screenInfo=JSON.parse(res.message);return screenInfo.getScreenWidth}else{return 0}},getScreenScreenRotation:()=>{const res=this.getSyncScreenInfo();if(res.code==="0"){const screenInfo=JSON.parse(res.message);return screenInfo.screenScreenRotation}else{return 0}},getScreenHeight:()=>{const res=this.getSyncScreenInfo();if(res.code==="0"){const screenInfo=JSON.parse(res.message);return screenInfo.screenHeight}else{return 0}}};hatom.deviceInfo={getScreenInfo:(callbackFunc)=>{hatom.native("Device.getScreenInfo",callbackFunc)},getNetInfo:(callbackFunc)=>{hatom.native("Device.getNetInfo",callbackFunc)},getDeviceInfo:(callbackFunc)=>{hatom.native("Device.getDeviceInfo",callbackFunc)}};hatom.appInfo={getAppInfo:(callbackFunc)=>{hatom.native("AppInfo.getAppInfo",callbackFunc)}};hatom.notify={setNotify:(callbackFunc,params)=>{hatom.native("NotifyPlugin.notify",callbackFunc,params)}};hatom.statusBar={setStatusBarMode:(data,callbackFunc)=>{hatom.native("StatusBar.setStatusBarMode",callbackFunc,data)}};hatom.coreServer={token:(callbackFunc,params)=>{hatom.native("CoreServerPlugin.token",callbackFunc)},queryService:(callbackFunc,params)=>{hatom.native("CoreServerPlugin.queryService",callbackFunc,params)},getAccountInfo:(callbackFunc,params)=>{hatom.native("CoreServerPlugin.getAccountInfo",callbackFunc,params)}};hatom.linkMapInfo={resIndexCodes:(callbackFunc,params)=>{hatom.native("LinkMapInfoPlugin.resIndexCodes",callbackFunc,params)}};hatom.debug={websocket:null,callback:{},initWebsocket:function(){console.log("in initWebsocket...");try{const{protocol,hostname}=window.location;this.websocket=new WebSocket(`${protocol.replace("http","ws")}\/\/${hostname}:7001/${getIsMobile()?"mobile":"pc"}`);this.websocket.onopen=()=>{console.log("websocket 连接成功")};this.websocket.onclose=()=>{console.log("websocket 断开连接");this.destroyWebsocket()};this.websocket.onerror=(err)=>{console.log("websocket Error",err);this.destroyWebsocket()};this.websocket.onmessage=(e)=>{try{const message=JSON.parse(e.data);if(message.type==="debug"){const{funcName,args,res}=message.data;if(message.target==="mobile"){hatom.native(funcName,this.callback[funcName],args)}else{if(res==="login"){_this.$hatomQrcode.close()}else if(res==="logout"){_this.$hatomQrcode()}if(funcName&&this.callback[funcName]){_this.$hatomMessage.close();this.callback[funcName](res)}}console.log("收到消息:",message)}}catch(err){console.log("信息出错:",err)}}}catch(err){console.log("websocket Error",err);this.destroyWebsocket()}},destroyWebsocket:function(){console.log("destory websocket...");if(this.websocket){this.websocket.close()}this.websocket=null}};function getIsMobile(){const p=window.navigator.platform;const isMobile=p.indexOf("Linux arm")>-1||p.indexOf("iphone")>-1||p.indexOf("Linux")>-1||p.indexOf("iPhone")>-1||p.indexOf("ipad")>-1||p.indexOf("iPad")>-1||p.indexOf("MacIntel")>-1;return isMobile}window.hatom=hatom;const install=(Vue,routerOb)=>{hatom.vueRouter=routerOb?routerOb.router:vueRouter;Vue.prototype.$hatom=hatom;if(process.env.DEBUG){_this.$hatomMessage=HatomMessage;_this.$hatomQrcode=HatomQrcode;if(!_this.$hatom.isMobile){_this.$hatomQrcode()}_this.$hatom.debug.initWebsocket();_this.$hatom.setBridge("onDestroyView",()=>{if(_this.$hatom.debug&&_this.$hatom.debug.websocket&&_this.$hatom.debug.websocket.readyState===1){_this.$hatom.debug.destroyWebsocket()}})}};export default install;